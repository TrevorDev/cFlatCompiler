//THIS FILE IS GENERATED IN proNode/nodes.jc
#ifndef NODES_H
#define NODES_H
#include "hashtable.h"

unsigned int hash (void *v);

int key_compare(void *k1, void *k2);

void delete(void *v);
void printSymbolTable(HashTable *h);
void printTypeTable(HashTable *h);

enum ValType {
	NONEVAL,
	INTVAL,
	STRVAL,
	FLOATVAL,
	CHARVAL
};

typedef struct symbolTableType{
	char * name;
	int size;
	//SEE IDEN FOR REAL ARRAY SIZE
	int array_size;
	struct symbolTableType * refType;
	char * baseType;
} symbolTableType;

void printSymbolTableType(symbolTableType * s);
void printTypeTable(HashTable *h);
int baseTypeToEnum(char * type);
struct symbolTableIden;

typedef struct functionArgs {
	struct symbolTableIden *iden;
	//type only used for function call params(see comma expr list)
	int type;
	struct functionArgs *next;
} functionArgs;

typedef struct symbolTableIden{
	char * name;
	symbolTableType * type;
	int isFunc;
	functionArgs *args;
	//THIS IS THE REAL ARRAY SIZE
	int arraySize;
} symbolTableIden;

typedef struct evaluatedNode{
	int type;
	char * strVal;
	int intVal;
	float floatVal;
	int deferEval;
	int isArray;
	functionArgs * params;
} evaluatedNode;

enum NodeType {
	<%- Object.keys(nodeTypes).map(function(val){return nodeTypes[val].enumType}).join(",\n\t") %>
};

int insert_symbol_table_iden_entry(char * name, int arraySize, int isFunc, functionArgs * args, char * type);

typedef struct Node{
    int nodeType;
    void (*printNode)(struct Node *node, int parentId);
    union{
		<% for (var key in nodeTypes) { %>
		struct <%- key %>{
			<%- nodeTypes[key].children.map(function(val){return "struct Node * "+val+";"}).concat(nodeTypes[key].val.map(function(val){return val.type+" "+val.name+";"})).join("\n\t\t\t") %>
		}<%- key %>;
		<% }; %>
    }children;
}Node;

void printTree(Node *node, int parentId);
void printGraphString(Node * root);
Node *create_Node(enum NodeType t, void (*printNode)(struct Node *node, int parentId));
<% for (var key in nodeTypes) { %>
	Node * create_<%- key %>(<%- nodeTypes[key].children.map(function(val){return "Node * "+val}).concat(nodeTypes[key].val.map(function(val){return val.type+" "+val.name})).join(", ") %>);
<% }; %>

<% for (var key in nodeTypes) { %>
	void <%- key %>_p(Node * node, int parentId);
<% }; %>

evaluatedNode * trav_node(Node * node);
#endif